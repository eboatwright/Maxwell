It still sometimes makes 3-fold repetitions when it's completely winning and low time

big idea:
	remove all constant variables, and put them into the BotConfig struct,
	then write my own tuning / matchmaking program that will tweak the values
	and play matches until it finds better values...

thoughts on NNUE:
	I've wanted to learn how to write neural net for a long time, so I want to implement NNUE eventually.
	But what I'm not going to do is just find a SF NNUE library and stick it in there because that's lame

try changing history to use [from][to]
countermoves
	on > alpha, or beta cutoff?
	index by [piece][to]

figure out some sort of multithreading:
	to implement pondering I think I'll have to add multithreading
	maybe on thread that waits for UCI commands like "stop"
	and a bunch of other threads to search

try giving a small boost in evaluation for the current side to move
try lower pawn evaluation values
experiment with more than 2 killer moves per ply
maybe remove the whole max search extension logic and just add to depth
overhaul CLI / UCI interface with proper error handling
look into using "buckets" for transposition table
count white and black material separately
calculate my own magic numbers; currently "borrowing" Sebastian Lague's ^^
check out pin detection to speed up check detection
try writing a struct that sorts moves incrementally

History reductions / pruning
https://www.chessprogramming.org/Internal_Iterative_Deepening
https://www.chessprogramming.org/Static_Exchange_Evaluation
https://www.chessprogramming.org/History_Leaf_Pruning
https://www.chessprogramming.org/Futility_Pruning#MoveCountBasedPruning
https://www.chessprogramming.org/Countermove_Heuristic
https://www.chessprogramming.org/ProbCut
https://www.chessprogramming.org/Razoring#Strelka
https://www.chessprogramming.org/Texel's_Tuning_Method
https://www.chessprogramming.org/Enhanced_Transposition_Cutoff

Some random resources I found: (Not using them right now but they could be useful)
https://analog-hors.github.io/site/magic-bitboards/